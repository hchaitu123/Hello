import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Random;

public class RandomFxtradesData {


	public static String getFxQuery() {
		
		String[] currencyPairArray = {"AEDAUD", "AEDCAD", "AEDCHF", "AEDDKK", "AEDEUR", "AEDGBP", "AEDINR", "AEDJPY", "AEDNZD", "AEDPKR", "AEDUSD", "AEDZAR", "ALLGBP", "ARSAUD", "ARSBRL", "ARSCAD", "ARSCHF", "ARSEUR", "ARSGBP", "ARSHKD", "ARSJPY", "ARSMXN", "ARSSGD", "ARSUSD", "AUDARS", "AUDBRL", "AUDCAD", "AUDCHF", "AUDCNY", "AUDCZK", "AUDDKK", "AUDEUR", "AUDFJD", "AUDGBP", "AUDHKD", "AUDHUF", "AUDIDR", "AUDILS", "AUDINR", "AUDJPY", "AUDKRW", "AUDMXN", "AUDMYR", "AUDNOK", "AUDNZD", "AUDPKR", "AUDPLN", "AUDSEK", "AUDSGD", "AUDTHB", "AUDTWD", "AUDUSD", "AUDZAR", "BDTGBP", "BDTJPY", "BGNCNY", "BGNDKK", "BHDEUR", "BHDPKR", "BNDGBP", "BRLARS", "BRLAUD", "BRLCAD", "BRLCHF", "BRLEUR", "BRLHKD", "BRLJPY", "BRLMXN", "BRLRUB", "BRLSEK", "BRLSGD", "BRLUSD", "BRLZAR", "BWPCHF", "BWPEUR", "BWPGBP", "BWPUSD", "BWPZAR", "CADAED", "CADARS", "CADAUD", "CADBRL", "CADCHF", "CADCNY", "CADDKK", "CADEUR", "CADGBP", "CADHKD", "CADIDR", "CADILS", "CADINR", "CADJPY", "CADKRW", "CADKWD", "CADMXN", "CADMYR", "CADNOK", "CADNZD", "CADPKR", "CADSEK", "CADSGD", "CADTHB", "CADTWD", "CADUSD", "CADZAR", "CHFAED", "CHFARS", "CHFAUD", "CHFBGN", "CHFBRL", "CHFBWP", "CHFCAD", "CHFCNY", "CHFCZK", "CHFDKK", "CHFEUR", "CHFGBP", "CHFHKD", "CHFHUF", "CHFIDR", "CHFILS", "CHFINR", "CHFISK", "CHFJPY", "CHFKRW", "CHFLVL", "CHFMXN", "CHFMYR", "CHFNOK", "CHFNZD", "CHFPLN", "CHFSEK", "CHFSGD", "CHFSZL", "CHFTHB", "CHFTRY", "CHFTWD", "CHFUSD", "CHFZAR", "CLPGBP", "CNYAUD", "CNYBGN", "CNYCAD", "CNYCHF", "CNYDKK", "CNYEUR", "CNYGBP", "CNYHKD", "CNYJPY", "CNYNZD", "CNYUSD", "CNYZAR", "COPDKK", "CRCGBP", "CYPZAR", "CZKDKK", "CZKEUR", "CZKJPY", "CZKMXN", "CZKNOK", "CZKSEK", "DJFGBP", "DKKAED", "DKKBGN", "DKKBRL", "DKKCHF", "DKKCNY", "DKKCOP", "DKKCZK", "DKKEEK", "DKKEUR", "DKKGBP", "DKKHKD", "DKKHUF", "DKKINR", "DKKISK", "DKKJPY", "DKKLVL", "DKKMXN", "DKKMYR", "DKKNOK", "DKKNZD", "DKKPHP", "DKKPLN", "DKKSEK", "DKKSGD", "DKKTRY", "DKKTWD", "DKKUAH", "DKKUSD", "DKKZAR", "DOPGBP", "EEKDKK", "EEKLVL", "EGPJPY", "EGPPKR", "ETBGBP", "EURAED", "EURAFN", "EURALL", "EURARS", "EURAUD", "EURBAM", "EURBBD", "EURBDT", "EURBGN", "EURBHD", "EURBIF", "EURBND", "EURBOB", "EURBRL", "EURBSD", "EURBWP", "EURBYR", "EURBZD", "EURCAD", "EURCHF", "EURCLP", "EURCNY", "EURCOP", "EURCRC", "EURCUP", "EURCVE", "EURCZK", "EURDJF", "EURDKK", "EURDOP", "EURDZD", "EUREEK", "EUREGP", "EURETB", "EURFJD", "EURGBP", "EURGHS", "EURGMD", "EURGNF", "EURGTQ", "EURHKD", "EURHNL", "EURHRK", "EURHTG", "EURHUF", "EURIDR", "EURILS", "EURINR", "EURIQD", "EURIRR", "EURISK", "EURJMD", "EURJOD", "EURJPY", "EURKES", "EURKHR", "EURKRW", "EURKWD", "EURKYD", "EURKZT", "EURLAK", "EURLBP", "EURLKR", "EURLSL", "EURLTL", "EURLVL", "EURLYD", "EURMAD", "EURMDL", "EURMKD", "EURMMK", "EURMOP", "EURMRO", "EURMUR", "EURMVR", "EURMWK", "EURMXN", "EURMYR", "EURNAD", "EURNGN", "EURNIO", "EURNOK", "EURNPR", "EURNZD", "EUROMR", "EURPAB", "EURPEN", "EURPGK", "EURPHP", "EURPKR", "EURPLN", "EURPYG", "EURQAR", "EURRON", "EURRSD", "EURRUB", "EURRWF", "EURSAR", "EURSCR", "EURSDD", "EURSEK", "EURSGD", "EURSKK", "EURSOS", "EURSTD", "EURSVC", "EURSYP", "EURSZL", "EURTHB", "EURTND", "EURTRY", "EURTTD", "EURTWD", "EURTZS", "EURUAH", "EURUGX", "EURUSD", "EURUYU", "EURUZS", "EURVEF", "EURVND", "EURXAF", "EURXOF", "EURXPF", "EURZAR", "EURZMK", "FJDGBP", "GBPAED", "GBPALL", "GBPARS", "GBPAUD", "GBPBDT", "GBPBGN", "GBPBHD", "GBPBIF", "GBPBND", "GBPBRL", "GBPBWP", "GBPCAD", "GBPCHF", "GBPCLP", "GBPCNY", "GBPCOP", "GBPCRC", "GBPCZK", "GBPDJF", "GBPDKK", "GBPDOP", "GBPDZD", "GBPEEK", "GBPEGP", "GBPETB", "GBPEUR", "GBPFJD", "GBPGMD", "GBPGTQ", "GBPHKD", "GBPHNL", "GBPHRK", "GBPHTG", "GBPHUF", "GBPIDR", "GBPILS", "GBPINR", "GBPIQD", "GBPIRR", "GBPISK", "GBPJMD", "GBPJOD", "GBPJPY", "GBPKES", "GBPKRW", "GBPKWD", "GBPKZT", "GBPLBP", "GBPLKR", "GBPLTL", "GBPLVL", "GBPMAD", "GBPMUR", "GBPMWK", "GBPMXN", "GBPMYR", "GBPNGN", "GBPNIO", "GBPNZD", "GBPOMR", "GBPPEN", "GBPPGK", "GBPPHP", "GBPPKR", "GBPPLN", "GBPQAR", "GBPRON", "GBPRUB", "GBPSAR", "GBPSCR", "GBPSEK", "GBPSGD", "GBPSKK", "GBPSZL", "GBPTHB", "GBPTND", "GBPTRY", "GBPTTD", "GBPTWD", "GBPTZS", "GBPUAH", "GBPUGX", "GBPUSD", "GBPVND", "GBPXAF", "GBPXPF", "GBPZAR", "GBPZMK", "GHSEUR", "GHSUSD", "GMDGBP", "GTQGBP", "HKDARS", "HKDAUD", "HKDBRL", "HKDCAD", "HKDCHF", "HKDCNY", "HKDDKK", "HKDEUR", "HKDGBP", "HKDIDR", "HKDINR", "HKDJPY", "HKDKRW", "HKDMXN", "HKDMYR", "HKDNZD", "HKDPKR", "HKDPLN", "HKDSEK", "HKDSGD", "HKDTHB", "HKDTWD", "HKDUSD", "HKDZAR", "HNLGBP", "HTGGBP", "HUFCHF", "HUFDKK", "HUFEUR", "HUFPLN", "IDRCAD", "IDRCHF", "IDRCNY", "IDREUR", "IDRGBP", "IDRINR", "IDRJPY", "IDRKRW", "IDRMYR", "IDRNZD", "IDRSGD", "IDRTHB", "IDRTWD", "IDRUSD", "IDRZAR", "ILSAUD", "ILSCAD", "ILSCHF", "ILSJOD", "ILSJPY", "ILSSEK", "INRAUD", "INRCAD", "INRCHF", "INRCNY", "INREUR", "INRGBP", "INRHKD", "INRJPY", "INRKRW", "INRMYR", "INRNZD", "INRPKR", "INRSEK", "INRTHB", "INRTWD", "INRUSD", "INRZAR", "IQDGBP", "IRRJPY", "ISKCHF", "ISKDKK", "ISKGBP", "ISKSEK", "JMDGBP", "JODILS", "JPYAED", "JPYARS", "JPYAUD", "JPYBRL", "JPYCAD", "JPYCHF", "JPYCNY", "JPYCZK", "JPYDKK", "JPYEUR", "JPYGBP", "JPYHKD", "JPYIDR", "JPYILS", "JPYINR", "JPYKRW", "JPYLVL", "JPYMXN", "JPYMYR", "JPYNOK", "JPYNZD", "JPYPKR", "JPYPLN", "JPYRUB", "JPYSEK", "JPYTHB", "JPYTWD", "JPYUSD", "JPYZAR", "KRWAUD", "KRWCAD", "KRWCHF", "KRWCNY", "KRWEUR", "KRWGBP", "KRWHKD", "KRWIDR", "KRWINR", "KRWJPY", "KRWMYR", "KRWNZD", "KRWSEK", "KRWSGD", "KRWTHB", "KRWTWD", "KRWUSD", "KRWZAR", "KWDGBP", "KWDPKR", "KZTGBP", "LTLLVL", "MADGBP", "MURGBP", "MWKGBP", "MXNARS", "MXNAUD", "MXNBRL", "MXNCAD", "MXNCHF", "MXNCZK", "MXNDKK", "MXNEUR", "MXNGBP", "MXNHKD", "MXNJPY", "MXNSGD", "MXNUSD", "MXNZAR", "MYRAUD", "MYRCAD", "MYRCHF", "MYRCNY", "MYRDKK", "MYREUR", "MYRGBP", "MYRHKD", "MYRIDR", "MYRINR", "MYRJPY", "MYRKRW", "MYRNZD", "MYRPKR", "MYRSGD", "MYRTHB", "MYRTWD", "MYRUSD", "MYRZAR", "NGNGBP", "NGNJPY", "NIOGBP", "NOKCHF", "NOKDKK", "NOKEUR", "NOKGBP", "NOKINR", "NOKJPY", "NOKLVL", "NOKSEK", "NOKUSD", "NOKZAR", "NZDAED", "NZDAUD", "NZDCAD", "NZDCHF", "NZDCNY", "NZDCZK", "NZDDKK", "NZDEUR", "NZDGBP", "NZDHKD", "NZDHUF", "NZDIDR", "NZDINR", "NZDJPY", "NZDKRW", "NZDMYR", "NZDPKR", "NZDPLN", "NZDSEK", "NZDSGD", "NZDTHB", "NZDTWD", "NZDUSD", "NZDZAR", "OMRGBP", "OMRPKR", "PENGBP", "PGKGBP", "PHPDKK", "PHPGBP", "PHPJPY", "PHPUSD", "PKRGBP", "PKRJPY", "PKRZAR", "PLNDKK", "PLNEUR", "PLNHUF", "PLNJPY", "PLNNOK", "PLNSEK", "QARGBP", "QARPKR", "QARZAR", "RONGBP", "RUBGBP", "RUBJPY", "RUBLVL", "RUBUSD", "SARPKR", "SCRGBP", "SEKAUD", "SEKCAD", "SEKCHF", "SEKCZK", "SEKDKK", "SEKEUR", "SEKGBP", "SEKILS", "SEKINR", "SEKISK", "SEKJPY", "SEKLVL", "SEKNOK", "SEKZAR", "SGDARS", "SGDAUD", "SGDBRL", "SGDCAD", "SGDCHF", "SGDCNY", "SGDDKK", "SGDEUR", "SGDGBP", "SGDHKD", "SGDIDR", "SGDINR", "SGDJPY", "SGDKRW", "SGDMXN", "SGDMYR", "SGDNZD", "SGDPKR", "SGDPLN", "SGDSEK", "SGDTHB", "SGDTWD", "SGDUSD", "SGDZAR", "SZLCHF", "SZLEUR", "SZLGBP", "SZLUSD", "THBAUD", "THBCAD", "THBCHF", "THBCNY", "THBEUR", "THBGBP", "THBHKD", "THBIDR", "THBINR", "THBJPY", "THBKRW", "THBMYR", "THBNZD", "THBPKR", "THBSGD", "THBTWD", "THBUSD", "THBZAR", "TNDGBP", "TRYCHF", "TRYDKK", "TRYJPY", "TRYZAR", "TTDGBP", "TWDAUD", "TWDCAD", "TWDCHF", "TWDCNY", "TWDDKK", "TWDGBP", "TWDHKD", "TWDIDR", "TWDINR", "TWDJPY", "TWDKRW", "TWDMYR", "TWDNZD", "TWDPKR", "TWDSEK", "TWDSGD", "TWDTHB", "TWDUSD", "TWDZAR", "TZSZAR", "UAHDKK", "USDAED", "USDALL", "USDAMD", "USDARS", "USDAUD", "USDBDT", "USDBGN", "USDBHD", "USDBIF", "USDBMD", "USDBND", "USDBOB", "USDBRL", "USDBWP", "USDBZD", "USDCAD", "USDCHF", "USDCLP", "USDCNY", "USDCOP", "USDCRC", "USDCUP", "USDCVE", "USDCZK", "USDDJF", "USDDKK", "USDDOP", "USDDZD", "USDEEK", "USDEGP", "USDETB", "USDEUR", "USDFJD", "USDGBP", "USDGEL", "USDGHS", "USDGMD", "USDGNF", "USDGTQ", "USDHKD", "USDHNL", "USDHRK", "USDHTG", "USDHUF", "USDIDR", "USDILS", "USDINR", "USDIQD", "USDIRR", "USDISK", "USDJOD", "USDJPY", "USDKES", "USDKHR", "USDKMF", "USDKRW", "USDKWD", "USDKZT", "USDLAK", "USDLBP", "USDLKR", "USDLSL", "USDLTL", "USDLVL", "USDLYD", "USDMAD", "USDMDL", "USDMKD", "USDMMK", "USDMOP", "USDMRO", "USDMUR", "USDMVR", "USDMWK", "USDMXN", "USDMYR", "USDNAD", "USDNGN", "USDNIO", "USDNOK", "USDNPR", "USDNZD", "USDOMR", "USDPAB", "USDPEN", "USDPGK", "USDPHP", "USDPKR", "USDPLN", "USDPYG", "USDQAR", "USDRON", "USDRSD", "USDRUB", "USDRWF", "USDSAR", "USDSCR", "USDSDD", "USDSEK", "USDSGD", "USDSKK", "USDSOS", "USDSTD", "USDSVC", "USDSYP", "USDSZL", "USDTHB", "USDTND", "USDTRY", "USDTWD", "USDTZS", "USDUAH", "USDUYU", "USDUZS", "USDVEF", "USDVND", "USDXAF", "USDXOF", "USDXPF", "USDYER", "USDZAR", "USDZMK", "VEFEUR", "VEFUSD", "VNDJPY", "VNDXAF", "XAGAUD", "XAGCAD", "XAGCHF", "XAGEUR", "XAGGBP", "XAGINR", "XAGTRY", "XAGUSD", "XAGZAR", "XAUAUD", "XAUCAD", "XAUCHF", "XAUEUR", "XAUGBP", "XAUINR", "XAUTRY", "XAUUSD", "XAUZAR", "XPDEUR", "XPDUSD", "XPFGBP", "XPTEUR", "XPTUSD", "ZARAED", "ZARAUD", "ZARBWP", "ZARCAD", "ZARCHF", "ZARCNY", "ZARCYP", "ZARDKK", "ZAREUR", "ZARGBP", "ZARHKD", "ZARIDR", "ZARINR", "ZARKRW", "ZARMYR", "ZARNOK", "ZARNZD", "ZARPHP", "ZARPKR", "ZARSEK", "ZARSGD", "ZARTHB", "ZARTRY", "ZARTWD", "ZARUSD", "ZMKZAR", "IDRAUD", "IDRHKD", "ZARJPY", "GBPNOK", "NZDPHP"};
		String[] sideArray = {"Sell", "Buy"};
		
		String[] statusArray = {"Cancelled", "Pending", "Approved"};
		String[] price = {"0.2674", "0.2715", "0.2545", "1.5262", "0.2047", "0.1759", "12.132", "22.155", "0.3514", "23.317", "0.2723", "1.802", "0.0061", "0.2424", "0.4115", "0.2475", "0.2311", "0.1853", "0.1589", "1.928", "20.127", "3.0741", "0.3185", "0.248", "4.0038", "1.6788", "1.0206", "0.9555", "6.588", "19.057", "5.6978", "0.764", "1.8411", "0.6553", "7.9515", "211.62", "9185.7", "3.6252", "45.569", "83.012", "1124.03", "12.5943", "3.093", "5.95", "1.3095", "87.721", "3.0188", "6.8548", "1.3121", "30.122", "28.867", "1.0227", "6.766", "0.009", "1.1355", "4.4087", "3.7966", "1.9897", "227.15", "0.4952", "2.3588", "0.5919", "0.5997", "0.5615", "0.4522", "4.663", "49.15", "7.4228", "18.329", "4.0553", "0.772", "0.6017", "4.0163", "0.1427", "0.1146", "0.0983", "0.1521", "1.0243", "3.678", "3.9208", "0.9791", "1.6568", "0.9355", "6.4515", "5.5847", "0.7481", "0.6415", "7.7875", "8995.4", "3.5507", "44.806", "81.24", "1100.73", "0.2818", "12.335", "3.029", "5.8292", "1.2841", "86.16", "6.7265", "1.285", "29.494", "28.435", "1.0012", "6.6277", "3.9297", "4.2", "1.0453", "1.5658", "1.7696", "6.7705", "1.071", "6.9113", "19.977", "5.9668", "0.7996", "0.6872", "8.3182", "222.317", "9636.8", "3.7921", "47.703", "122.7", "86.77", "1179.3", "0.5672", "13.174", "3.2444", "6.2204", "1.3709", "3.1644", "7.1729", "1.3765", "6.9408", "31.597", "1.6502", "30.337", "1.0703", "7.0894", "0.0014", "0.1494", "0.2228", "0.1514", "0.1417", "0.8491", "0.1139", "0.0982", "1.1797", "12.399", "0.1968", "0.1513", "1.0026", "0.0028", "0.0013", "15.122", "0.2974", "0.0399", "4.3388", "0.6621", "0.311", "0.3585", "0.0036", "0.6533", "0.2613", "0.3614", "16.723", "1.1566", "350.2", "3.344", "2.0964", "0.1342", "0.1149", "1.3959", "37.157", "8.0138", "20.575", "14.5551", "0.0951", "2.211", "0.5429", "1.0443", "0.2299", "7.7601", "0.5296", "1.2025", "0.2299", "0.2769", "5.0979", "1.4119", "0.1795", "1.1871", "0.0172", "0.4759", "0.0453", "13.965", "14.787", "0.0385", "4.867", "56.6", "136.33", "5.2685", "1.3083", "1.9458", "2.6267", "92.654", "1.9483", "0.4964", "1607.36", "1.6912", "9.1818", "2.2013", "1.3314", "8.4801", "3966", "2.5932", "1.3357", "1.2508", "612.28", "8.7306", "2610", "665.68", "1.308", "108.26", "25.0225", "230.78", "7.4528", "49.221", "97.893", "15.6264", "7.649", "22.0007", "2.4384", "0.8571", "1.9638", "37.021", "9345.4", "10.527", "10.4047", "24.788", "7.3737", "52.2", "277.174", "12020", "4.7367", "59.7557", "1535.2", "13608.614", "153.37", "112.268", "0.9273", "108.617", "106.64", "5306.9", "1497.1", "0.3723", "1.0841", "194.23", "10531.1", "2007", "146.84", "8.6549", "3.4517", "0.7075", "1.6416", "11.019", "15.955", "61.749", "8.442", "10.5289", "371.75", "39.55", "16.848", "198.76", "16.292", "4.0853", "8.6549", "200.6", "28.78", "7.7835", "93.938", "1.715", "0.5085", "1.313", "3.6761", "3.2793", "57.852", "114.85", "3.9542", "6086.6", "4.8196", "4.2713", "105.464", "40.538", "777.3", "5.016", "16.227", "312.37", "8.9702", "1.7185", "30.575", "2101.4", "24391.8", "11.47", "61.302", "8.6933", "39.706", "1.9108", "2.0642", "8.3485", "37.997", "1984.22", "10.5233", "3045.9", "1.3384", "26.033", "2159.89", "5.752", "25695", "642.957", "642.957", "116.86", "8.8472", "6331.8", "0.3539", "5.725", "158.5", "6.2005", "1.5247", "107.45", "2.2807", "0.5768", "1871.8", "1.9638", "2.595", "9.832", "1.5568", "1.4584", "730.5", "10.049", "3041.7", "792.46", "29.039", "267.59", "8.697", "58.3", "113.51", "18.212", "8.88", "25.51", "1.1643", "2.8003", "43.1125", "12.508", "12.119", "29.485", "8.5534", "62.027", "323", "14011", "5.5313", "69.449", "1780.6", "15784", "178.21", "130.21", "1.0753", "126.6", "123.6", "1714.4", "0.4319", "225.21", "2342.6", "170.71", "4.0218", "0.8253", "12.782", "45.86", "230.4", "19.218", "4.7169", "237.42", "34.142", "1.9999", "0.5898", "4.3803", "3.803", "67.108", "133.9", "4.609", "5.6749", "4.9547", "47.024", "5.8551", "18.815", "10.4795", "2.001", "35.639", "10.08", "46", "2.2155", "2.4074", "9.683", "45.64", "2057", "12.202", "3151", "1.561", "29798", "748.84", "139.26", "10.3106", "7373", "0.5005", "0.6648", "0.0226", "0.08", "0.5033", "0.1257", "0.2131", "0.1283", "0.1201", "0.8282", "0.7159", "0.0961", "0.0824", "1155", "5.7398", "10.438", "141.33", "1.5837", "0.3889", "0.1649", "11.012", "0.3793", "0.8619", "0.165", "3.7869", "3.6516", "0.1286", "0.8504", "0.0339", "0.0161", "0.0045", "0.0266", "0.0036", "0.0142", "1.1106", "0.0104", "0.0717", "0.0083", "0.0071", "0.005", "0.9032", "12.551", "0.0337", "0.0143", "0.0001", "0.3277", "0.3159", "0.0111", "0.0735", "0.2751", "0.2809", "0.263", "0.2007", "22.84", "1.8882", "0.022", "0.0225", "0.021", "0.1449", "0.0141", "0.0144", "0.1748", "1.825", "24.717", "0.068", "0.0288", "1.9204", "0.1507", "0.6623", "0.6353", "0.0224", "0.1487", "0.0005", "0.0077", "0.0049", "0.0289", "0.0033", "0.0345", "0.0075", "4.9666", "0.0452", "0.0482", "0.012", "0.0205", "0.0123", "1.1507", "0.0794", "0.2299", "0.0685", "0.0092", "0.0079", "0.0958", "110.64", "0.0437", "0.5492", "13.5373", "0.6529", "0.1517", "0.0373", "0.0717", "0.0158", "1.0556", "0.0363", "0.3762", "8.2583", "0.3628", "0.349", "0.0123", "0.0816", "0.0872", "0.089", "0.0832", "0.5744", "0.0655", "0.0571", "0.6932", "8.0086", "3.9642", "7.237", "0.2697", "0.1143", "0.006", "0.0011", "2.626", "2.5317", "0.0875", "0.5892", "2.2999", "303.96", "0.0043", "0.2053", "0.0763", "0.0208", "0.0042", "0.3158", "0.0791", "0.1339", "0.0807", "0.0756", "1.5057", "0.4501", "0.0604", "0.0518", "0.6284", "6.566", "0.1037", "0.0809", "0.5364", "0.317", "0.3237", "0.303", "2.0891", "1.8197", "0.2441", "0.2077", "2.5213", "2912.7", "14.517", "26.323", "366.33", "0.4158", "27.832", "0.416", "9.5503", "9.2075", "0.3183", "2.1449", "0.0042", "0.5334", "0.0293", "16.01", "0.955", "0.1283", "0.11", "7.6481", "13.903", "0.091", "1.1496", "0.1719", "1.1375", "2.8213", "0.7631", "0.778", "0.7278", "5.0283", "14.483", "4.3453", "0.5818", "0.4999", "6.069", "161.21", "7011.2", "34.719", "63.344", "857.96", "2.3605", "66.81", "2.2978", "5.2315", "1.0015", "22.988", "22.054", "0.7798", "5.16", "1.6805", "222.39", "0.2282", "0.252", "0.1277", "0.0147", "1.8562", "0.0229", "0.0075", "0.9491", "0.077", "1.8721", "0.2512", "69.979", "27.288", "1.9639", "2.2641", "0.1773", "23.52", "1.8163", "0.2003", "0.0212", "2.6612", "0.017", "0.0325", "22.837", "0.0521", "0.1457", "0.1487", "13.87", "2.7859", "0.8279", "0.1114", "0.0953", "0.5282", "6.6518", "17.105", "12.0847", "0.0789", "0.8675", "0.9873", "3.0474", "0.7609", "1.2871", "0.7769", "0.7272", "5.0142", "4.3313", "0.5811", "0.4992", "6.0531", "6991.3", "34.788", "63.138", "855.51", "9.5949", "2.3538", "0.9989", "66.807", "2.2958", "5.2204", "23.215", "22.652", "0.7792", "5.1592", "0.1385", "0.1112", "0.0955", "0.1475", "0.0325", "0.0332", "0.0311", "0.2144", "0.0244", "0.0213", "0.2588", "298.93", "1.4851", "2.7015", "36.586", "0.1007", "0.0429", "2.8558", "0.0427", "0.945", "0.0326", "0.2201", "0.4471", "0.604", "3.599", "52.371", "4.2855", "0.1002", "0.0336", "0.0343", "0.0321", "0.227", "0.1886", "0.022", "0.2668", "308.22", "1.5432", "2.785", "38.942", "0.1038", "0.0438", "2.9308", "0.23", "0.044", "1.0108", "0.0343", "0.227", "0.0044", "0.6964", "3.6729", "102.614", "363.44", "3.9129", "0.9771", "69.209", "1.4636", "0.377", "1205", "1", "1.271", "6.8585", "1.66", "6.3362", "1.937", "0.9975", "0.9344", "467.75", "6.5916", "1926.2", "497.24", "0.977", "83.015", "18.641", "175.8", "5.5665", "37.217", "74", "11.6938", "5.6906", "16.434", "0.7467", "1.8188", "0.6405", "1.765", "1.484", "26.25", "6905.4", "7.8637", "7.7725", "18.516", "5.4965", "38.991", "207.29", "8985", "3.543", "44.6202", "1166.5", "10300", "115.096", "0.7035", "81.117", "80.5", "4034.9", "369.5", "1098.53", "0.2815", "145.08", "8015", "1498", "110.61", "6.662", "2.5774", "0.5287", "1.251", "8.325", "11.926", "46.514", "6.3061", "7.864", "281", "29.55", "12.63", "151", "12.329", "3.0229", "6.662", "151.76", "21.5", "5.815", "70.569", "1.2801", "0.383", "0.9808", "2.805", "2.4495", "45.51", "85.6", "2.9477", "4546.5", "3.6408", "3.2208", "79.444", "30.567", "586", "3.75", "12.0151", "246.62", "6.7046", "1.2827", "22.834", "1555", "18704", "8.5662", "45.794", "6.6624", "29.4678", "1.435", "1.5425", "29.165", "1482.1", "7.86", "19.446", "1613.4", "4.2904", "19460", "484.71", "484.75", "89.722", "213.23", "6.6188", "4773.8", "0.1752", "0.232", "0.0041", "0.0249", "30.16", "30.84", "28.8033", "23.09", "19.76", "1374.89", "47.73", "30.856", "204.51", "1389.6", "1418.4", "1327.03", "1062.07", "910.2", "63293", "2187.11", "1420.68", "9414.4", "592.05", "794", "0.0071", "1318.77", "1766", "0.5531", "0.1475", "0.9716", "0.1506", "0.1409", "0.9717", "0.0658", "0.8387", "0.1124", "0.0967", "1.1728", "1355", "6.7103", "165.7954", "0.46", "0.8766", "0.1935", "6.5686", "12.927", "1.0112", "0.1935", "4.4427", "0.2326", "4.2742", "0.1506", "0.0014", "0.011", "0.0009", "12.351", "8.678", "33.038"};
		Random randomizer = new Random();
		int index1 = getBetween(0,currencyPairArray.length - 1);
		String selectProduct = currencyPairArray[index1];
		String p = price[index1];
		String first = p.substring(0,p.length() - 2);
		String selectPrice = first + getBetween(10,99);
		int selectVolume = getBetween(1000, 10000);
		int selectQuantity = getBetween(100, selectVolume);
		String selectSide = sideArray[getBetween(0,1)];
		String selectStatus = statusArray[getBetween(0,statusArray.length-1)];
		
		GregorianCalendar selectOrderCal = getOrderDate();
//        GregorianCalendar selectSettleCal = getSettleDate(selectOrderCal);
        String selectOrderDate = ""+selectOrderCal.get(Calendar.YEAR)+"-"+
                ""+selectOrderCal.get(Calendar.MONTH)+"-"+
                ""+selectOrderCal.get(Calendar.DATE)+" "+
                ""+selectOrderCal.get(Calendar.HOUR)+":"+
                ""+selectOrderCal.get(Calendar.MINUTE)+":"+
                ""+selectOrderCal.get(Calendar.SECOND);
//        String selectSettleDate = ""+selectSettleCal.get(Calendar.YEAR)+"-"+
//                ""+selectSettleCal.get(Calendar.MONTH)+"-"+
//                ""+selectSettleCal.get(Calendar.DATE)+" "+
//                ""+selectSettleCal.get(Calendar.HOUR)+":"+
//                ""+selectSettleCal.get(Calendar.MINUTE)+":"+
//                ""+selectSettleCal.get(Calendar.SECOND);
        
        String selectIsin = "";
        String selectTerms = "";
        
        String[] firms = {"Hello"};
        String selectFirm = firms[getBetween(0,firms.length-1)];
        
        
        
        
        
        return "UPDATE table VALUES ('"+selectSide+"', '"+selectOrderDate+"',  '"+selectStatus+"', '"+selectIsin+"', '"+selectProduct+"', '"+selectQuantity
        + "', '"+selectPrice+"','"+selectVolume+"', '"+selectTerms+"' '"+selectFirm+"')";

	}

	private static int getBetween(int i, int j) {
		Random randomizer = new Random();
		return randomizer.nextInt(j - i + 1) + i; 
	}
	
	public static GregorianCalendar getOrderDate() {
	    GregorianCalendar gc = new GregorianCalendar();
	    int year = getBetween(2010, 2015);
	    int month = getBetween(1, 12);
	    int day = getBetween(1, gc.getActualMaximum(Calendar.DAY_OF_MONTH));
	    int hour = getBetween(0, 12);
	    int minute = getBetween(0, 59);
	    int second = getBetween(0, 59);
	    gc.set(year, month, day, hour, minute, second);
	    return gc;
	}

//	public static GregorianCalendar getSettleDate(GregorianCalendar gcOrder) {
//	    GregorianCalendar gc = new GregorianCalendar();
//	    int year = getBetween(gcOrder.get(Calendar.YEAR), 2015);
//	    int month = getBetween(gcOrder.get(Calendar.MONTH), 12);
//	    int date = getBetween(gcOrder.get(Calendar.DAY_OF_MONTH), gc.getActualMaximum(Calendar.DAY_OF_MONTH));
//	    int hour = getBetween(gcOrder.get(Calendar.HOUR), 12);
//	    int minute = getBetween(gcOrder.get(Calendar.MINUTE), 59);
//	    int second = getBetween(gcOrder.get(Calendar.SECOND), 59);
//	    gc.set(year, month, date, hour, minute, second);
//	    return gc;
//	}
	
	public static void main(String[] args) {
		System.out.println(getFxQuery());
	}

}
